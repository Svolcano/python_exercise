# -*- coding: utf-8 -*-
"""
Created on Fri Mar 23 10:57:38 2018

@author: huang
"""
import pymongo
import time
import redis
import hashlib 
import multiprocessing
import sys,getopt
import datetime
sys.path.append('../')


DEV_MONGO_CONFIG = {
    'host': '127.0.0.1',
    'port': 27017,
    'db': 'crs'
}

PRO_MONGO_CONFIG = {
    'host': '127.0.0.1',
    'port': 27017,
    'db': 'crs'
}

REDIS_CONFIG = {
    'host' : '172.18.21.197',
    'port' : 6379,
}

#DEV_MONGO_CONFIG = {
#    'host': '172.18.19.219',
#    'port': 27017,
#    'db': 'crs'
#}
#
#PRO_MONGO_CONFIG = {
#    'host': '172.18.19.219',
#    'port': 27017,
#    'db': 'crs'
#}
#
#REDIS_CONFIG = {
#    'host' : '172.18.19.218',
#    'port' : 6379,
#}

TABLE_COL_MAP={
        'call_method':'mtd',
        'tel':'tel',
        'call_from':'frm',
        'call_cost':'cot',
        'call_duration':'dur',
        'call_time':'tim',
        'call_tel':'cte',
        'month':'mon',
        'call_to':'cto',
        'call_type': 'tye',
        'status':'sts', 
        'mtd':'mtd',
        'tel':'tel',
        'frm':'frm',
        'cot':'cot',
        'dur':'dur',
        'tim':'tim',
        'cte':'cte',
        'mon':'mon',
        'cto':'cto',
        'tye': 'tye',
        'sts':'sts', 
        'uti':'uti'     
}  

CRONTAB_TASK={
        '2018-04-12':['2017-10-01','2017-11-01'],
        '2018-04-13':['2017-11-01','2017-12-01'],
        '2018-04-14':['2017-12-01','2018-01-01'],
        '2018-04-15':['2018-01-01','2018-02-01'],
        '2018-04-16':['2018-02-01','2018-03-01'],
        '2018-04-17':['2018-03-01','2018-04-01']
}

BEGIN_DATE='2017-10-01'
END_DATE='2018-04-01'

opts, args = getopt.getopt(sys.argv[1:], "tb:e:c")
for op, value in opts:
    if op == "-b":
        BEGIN_DATE = value
    elif op == "-e":
        END_DATE = value
    elif op=="-t":
        BEGIN_DATE='2018-03-30'
        END_DATE='2018-03-31'
    elif op=="-c":
        now_date =datetime.datetime.now().strftime("%Y-%m-%d")
        print now_date
        if CRONTAB_TASK.has_key(now_date):
            BEGIN_DATE=CRONTAB_TASK[now_date][0]
            END_DATE=CRONTAB_TASK[now_date][1]

print 'BEGIN_DATE='+BEGIN_DATE
print 'END_DATE='+END_DATE

process_size=3 
batch_size=3

class Pro_MongodbConnection(object):
    """
    MongoDB连接类
    """
    def __init__(self):
        self.conn = None
        self.set_pro_db_conn()

    def set_pro_db_conn(self):
        self.client = pymongo.MongoClient(PRO_MONGO_CONFIG['host'], PRO_MONGO_CONFIG['port'], connect=False)
        self.conn = self.client[PRO_MONGO_CONFIG['db']]

    def export_data(self,sid):
        data = self.conn['call_log'].find({'sid':sid},{'call_method':1,'tel':1,'call_from':1,'call_cost':1,
                        'call_duration':1,
                        'call_time':1,
                        'call_tel':1,
                        'month':1,
                        'call_to':1,
                        'call_type':1,'_id':0})
        return data
    def get_sid_set(self,begindate=BEGIN_DATE,enddate=END_DATE):
        print u"开始获取[%s]--[%s]期间sid!"%(begindate,enddate)
        timeArray = time.strptime(begindate, "%Y-%m-%d")
        begindate = time.mktime(timeArray)
        timeArray = time.strptime(enddate, "%Y-%m-%d")
        enddate = time.mktime(timeArray)
        begin_time=time.time()
        data = self.conn['sid_info'].find({"end_time":{'$gte':begindate,'$lte':enddate},'status':0})
        sid_list=[]
        for x in data:
            sid_list.append(x['sid'])
        print u'获取sid:'+str(len(sid_list))+u'条花费:' + str(time.time()-begin_time)+u'秒'
        return sid_list
    
    
class Dev_MongodbConnection(object):
    """
    MongoDB连接类
    """
    def __init__(self):
        self.conn = None
        self.set_dev_db_conn()

    def set_dev_db_conn(self):
        self.client = pymongo.MongoClient(DEV_MONGO_CONFIG['host'], DEV_MONGO_CONFIG['port'], connect=False)
        self.conn = self.client[DEV_MONGO_CONFIG['db']]

    def insert_data(self,data):
        where_dict={'tel':data['tel']}
        ret = self.conn['call_log_details'].update(where_dict,data,upsert=True)
        return ret
    
    def get_tel_data(self,tel):
        where_dict={'tel':tel}
        ret = self.conn['call_log_details'].find_one(where_dict,{'_id':0})
        return ret





class RedisWrapper(object):
    """
    Redis连接类
    """
    def __init__(self):
        self.conn = None
        self.set_db_conn()

    def set_db_conn(self):
        connection_pool = redis.ConnectionPool(host=REDIS_CONFIG['host'],db=2, port=REDIS_CONFIG['port'])
        self.conn = redis.StrictRedis(connection_pool=connection_pool)

    def get_db_conn(self):
        db = self.conn
        return db


class Redis_MD5:
    def __init__(self):
        self.redis_instance = RedisWrapper().get_db_conn()  
    
    def set_buff(self,md5_str):
        param=self.redis_instance.set(md5_str,'',1728000)
        return param
    
    def get_buff(self,md5_str):
        param=self.redis_instance.get(md5_str)
        return param
          
         
                                  
def md5sum(data_dict):
    mac_buff=[]
    mac_buff.append(data_dict['tel'])
    mac_buff.append(data_dict['call_cost'])
    mac_buff.append(data_dict['call_duration'])
    mac_buff.append(data_dict['call_time'])
    mac_buff.append(data_dict['call_tel'])
#    mac_buff.append(data_dict['month'])
    my_md5 = hashlib.md5() #获取一个MD5的加密算法对象 
    my_md5.update(' '.join(mac_buff)) #得到MD5消息摘要  
    fmd5 = my_md5.hexdigest() #以16进制返回消息摘要，32位
    return fmd5     

def cross_key_name(data):
    data_dict_fin={}
    for key,value in data.items():
        data_dict_fin[TABLE_COL_MAP[key]]=value
    return data_dict_fin

def sid_dual(sid_list):
    pro_conn = Pro_MongodbConnection()
    dev_conn = Dev_MongodbConnection()
    RedisMD5=Redis_MD5()
    sid_len=len(sid_list)
    for k,sid in enumerate(sid_list):
#        print sid
        begin_time=time.time()
        datas=pro_conn.export_data(sid)
        data_dict={}
        count=1
        print "("+ str(k)+"/"+ str(sid_len) +")"+sid + u'有' + str(datas.count()) + u'条记录需要处理!'
        
        for j,data in enumerate(datas):
            # 查询数据号内容是否存在
            if j==0:
                ret=dev_conn.get_tel_data(data['tel'])
                if ret!=None:
                    data_dict=ret
                    count=0
            
            if len(data)>0 and data.has_key('month'):
                if (data['tel']) not in data_dict.values():
                    data_dict[TABLE_COL_MAP['tel']]=data['tel']
                if  not data_dict.has_key(data['month']):
                    details=[]
                    data_dict[data['month']]={TABLE_COL_MAP['status']:3,'det':details}
                timeArray = time.strptime(BEGIN_DATE, "%Y-%m-%d")
                enddate = time.mktime(timeArray)
                if data['call_time'] < enddate:
                    continue
#                print u'开始生成MD5'+str(time.time())
                md5_str=md5sum(data)
                if None==RedisMD5.get_buff(md5_str):
                    RedisMD5.set_buff(md5_str)
                    data=cross_key_name(data)
                    data_dict[data[TABLE_COL_MAP['month']]]['det'].append(data)
                    count=count+1
                else:
                    pass
#                    print md5_str+'重复'
                
        if len(data_dict)>0 and count>0:
            data_dict[TABLE_COL_MAP['uti']]=str(int(time.time()))
            dev_conn.insert_data(data_dict)
        end_time=time.time()
        print u'当前进度:'+str(float(k)/sid_len) + u',共处理' + str(datas.count()) + u'条记录花费:' + str(end_time-begin_time)+u'秒'
        


def single_process_gevent(sid_list_set):  
    import gevent
    import gevent.monkey
    gevent.monkey.patch_all()
    print len(sid_list_set)
    print id(sid_list_set)
    if len(sid_list_set) <batch_size:
        batch=1
        step=len(sid_list_set)
    else:
        batch=batch_size
        step=len(sid_list_set)/batch_size
    tasks =[]
    for i in range(batch):
        begin=step*i
        end=step*(i+1)
        print begin,end
        sid_list=sid_list_set[begin:end]
        tasks.append(gevent.spawn(sid_dual,sid_list))
    gevent.joinall(tasks)
    return True
    
   

if __name__ == '__main__':
    pro_conn = Pro_MongodbConnection()
    sid_list_set=pro_conn.get_sid_set()
    del pro_conn 
    list_len=len(sid_list_set)+1
    step=list_len/process_size
    start = time.time()
    pool = multiprocessing.Pool(processes = process_size)
    for i in range(process_size):
        begin=step*i
        end=step*(i+1)
        print begin,end
        sid_list=sid_list_set[begin:end]
        pool.apply_async(single_process_gevent, (sid_list, ))  

    pool.close()
    pool.join()
    print "The number of CPU is:" + str(multiprocessing.cpu_count()) 

    end = time.time()
    print '{} processes take {} seconds'.format(process_size, (end - start))   
        